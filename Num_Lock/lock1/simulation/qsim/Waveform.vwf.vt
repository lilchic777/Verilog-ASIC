// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2023 22:33:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clk0;
reg clk1;
reg clk2;
reg clk3;
reg judge;
reg rst;
reg setpw;
// wires                                               
wire g_rst;
wire [6:0] led;
wire [6:0] led_countdown;
wire [3:0] pos;
wire pos_countdown;
wire staus;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk0(clk0),
	.clk1(clk1),
	.clk2(clk2),
	.clk3(clk3),
	.g_rst(g_rst),
	.judge(judge),
	.led(led),
	.led_countdown(led_countdown),
	.pos(pos),
	.pos_countdown(pos_countdown),
	.rst(rst),
	.setpw(setpw),
	.staus(staus)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// clk0
initial
begin
	clk0 = 1'b0;
	clk0 = #15000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #15000 1'b0;
	clk0 = #20000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #15000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #15000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #15000 1'b0;
	clk0 = #15000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #45000 1'b0;
	clk0 = #35000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #20000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #15000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #25000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #25000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #15000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #15000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #20000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #20000 1'b0;
	clk0 = #15000 1'b1;
	clk0 = #20000 1'b0;
	clk0 = #15000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #15000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #15000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #5000 1'b1;
	clk0 = #5000 1'b0;
	clk0 = #10000 1'b1;
	clk0 = #10000 1'b0;
	clk0 = #10000 1'b1;
end 

// clk1
initial
begin
	clk1 = 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #20000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #25000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #20000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #25000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #20000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #20000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #20000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #20000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #30000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #25000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #25000 1'b1;
	clk1 = #25000 1'b0;
	clk1 = #5000 1'b1;
end 

// clk2
initial
begin
	clk2 = 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #15000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #30000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #15000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #15000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #20000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #20000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #25000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #25000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #25000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #50000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #25000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #15000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #15000 1'b0;
	clk2 = #15000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #5000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #10000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #25000 1'b0;
	clk2 = #25000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #15000 1'b1;
	clk2 = #5000 1'b0;
	clk2 = #10000 1'b1;
	clk2 = #5000 1'b0;
end 

// clk3
initial
begin
	clk3 = 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #35000 1'b0;
	clk3 = #15000 1'b1;
	clk3 = #15000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #45000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #15000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #15000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #15000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #30000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #15000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #35000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #20000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #15000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #20000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #15000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #15000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #15000 1'b0;
	clk3 = #15000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #15000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #15000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #20000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #10000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #25000 1'b0;
	clk3 = #20000 1'b1;
	clk3 = #15000 1'b0;
	clk3 = #5000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #10000 1'b1;
	clk3 = #5000 1'b0;
	clk3 = #5000 1'b1;
end 

// judge
initial
begin
	judge = 1'b1;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// setpw
initial
begin
	setpw = 1'b0;
end 
endmodule

