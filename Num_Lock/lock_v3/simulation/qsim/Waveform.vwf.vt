// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/25/2023 23:56:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg judge;
reg [9:0] key;
reg rst;
reg setpw;
// wires                                               
wire beep;
wire key_all;
wire [6:0] led;
wire led_g;
wire led_r;
wire led_test;
wire [7:0] pos;
wire status;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.beep(beep),
	.clk(clk),
	.judge(judge),
	.key(key),
	.key_all(key_all),
	.led(led),
	.led_g(led_g),
	.led_r(led_r),
	.led_test(led_test),
	.pos(pos),
	.rst(rst),
	.setpw(setpw),
	.status(status)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// judge
initial
begin
	judge = 1'b0;
	judge = #50000 1'b1;
	judge = #370000 1'b0;
end 
// key[ 9 ]
initial
begin
	key[9] = 1'b0;
end 
// key[ 8 ]
initial
begin
	key[8] = 1'b0;
	key[8] = #70000 1'b1;
	key[8] = #50000 1'b0;
end 
// key[ 7 ]
initial
begin
	key[7] = 1'b0;
end 
// key[ 6 ]
initial
begin
	key[6] = 1'b0;
end 
// key[ 5 ]
initial
begin
	key[5] = 1'b0;
end 
// key[ 4 ]
initial
begin
	key[4] = 1'b0;
	key[4] = #140000 1'b1;
	key[4] = #60000 1'b0;
end 
// key[ 3 ]
initial
begin
	key[3] = 1'b0;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b0;
	key[2] = #230000 1'b1;
	key[2] = #70000 1'b0;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
	key[1] = #340000 1'b1;
	key[1] = #50000 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// setpw
initial
begin
	setpw = 1'b0;
end 
endmodule

